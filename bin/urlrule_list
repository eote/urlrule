#!/usr/bin/perl -w
###APPNAME:     urlrule_list
###APPAUTHOR:   duel
###APPDATE:	Thu Apr  3 07:46:26 2008
###APPVER:	0.1
###APPDESC:     list urlrules	
###APPUSAGE:    [Level]	
###APPEXAMPLE:	urlrule_list 1
###APPOPTION:	
use strict;
use utf8;
use warnings;
use Getopt::Long;
use URI::Escape;
use Data::Dumper;
use lib $ENV{XR_PERL_MODULE_DIR};
use MyPlace::Script::Message;
use MyPlace::URLRule::OO;
binmode STDOUT,'utf8';
eval('require ListSource;');



my @LIST_TEMP;
sub list_incoming {
	my $handler = shift;
	my $res = shift;
	my $rule = shift;
	push @LIST_TEMP,@{$res->{data}};
	return $res->{data};
}
sub load_list {
	if(%ListSource::stars_list) {
		return \%ListSource::stars_list;
	}
	else {
		return {};
	}
}

sub save_list {
	my $list = shift;
	my $dumper = new Data::Dumper([$list],[qw/*stars_list/]);
	$dumper->Purity(1)->Sortkeys(1);
	open FO,">","ListSource.pm" or die("$!\n");
	print FO "package ListSource;\n";
	print FO "our ", $dumper->Dump(), "\n";
	print FO "1;\n__END__\n";
	close FO;
}

sub strnum {
	my $value = shift(@_);
	my $length = shift(@_) || 3;
	if($value <1000 and $value >=0) {
		$value = substr('0'x$length . $value,-3);
	}
	return $value;
}

my $RULE = new MyPlace::URLRule::OO(
		buildurl=>1,
		createdir=>0,
		callback_process => \&list_incoming,
);
sub query_list {
	@LIST_TEMP = ();
	my $url = shift(@_) or return;
	#die("Usage:\n$0 URL [level] [action]\n");
	my $level = shift(@_) or 0;
	$RULE->autoApply({url=>$url,level=>$level});
	return @LIST_TEMP;
}

my @OPTIONS = qw/
	help|h
	write|w:s
/;
my %OPTS;
GetOptions(\%OPTS,@OPTIONS);
if($OPTS{help}) {
	app_message <<"USAGE";
	$0 - Lists  downloader
	Usage:
		$0 [--write] [queries|URLs]
	Synopsis:
		$0 -w Japan
		$0 -w http://en.wikipedia.org/wiki/AVN_Best_New_Starlet_Award
		$0 http://en.wikipedia.org/wiki/AVN_Best_New_Starlet_Award
USAGE
	exit 1;
}


my %stars_list = %{&load_list};
my $IGNORE_EXP = qr/$stars_list{'#IGNORE_EXP#'}/ if($stars_list{'#IGNORE_EXP#'});
my @query = @ARGV;
@query = keys %stars_list unless(@query);
my %stars;
my $F_lm;
foreach(@query) {
	my $level = 0;
	if(m/^(.+)\|(\d+)$/) {
		$_ = $1;
		$level = $2;
	}
	my %names;
	app_message "Fetching [$_]\n";
	my @url;
	if(!$stars_list{$_}) {
		push @url,$_;
		$_ = uri_unescape($_);
		s/[\/:]+$//;
		s/^.*[\/:]+//;
		$_ = $url[0] unless($_);
		my $F_dup = 0;
		if($stars_list{$_}) {
			foreach(@{$stars_list{$_}}) {
				if($_ eq $url[0]) {
					$F_dup = 1;
					last;
				}
			}
			if(!$F_dup) {
				$F_lm = 1;
				push @{$stars_list{$_}},"$url[0]|$level";
			}
		}
		else {
			$stars_list{$_} = ["$url[0]|$level"];
			$F_lm = 1;
		}
	}
	else {
		@url = @{$stars_list{$_}};
	}
	my $OUTPUT = "$_.txt";
	if(defined $OPTS{write}) {
		$OUTPUT = $OPTS{write} if(length($OPTS{write})>0);
		app_message "Open $OUTPUT for writting...\n";
		open FO,">",$OUTPUT or die("$!\n");
	}
	else {
		open FO,">&STDOUT";
	}
	foreach(@url) {
		app_message "Source: ",uri_unescape($_),"\n";
		foreach(query_list($_,$level)) {
			next if($IGNORE_EXP and $_ =~ $IGNORE_EXP);
			if(m/^(\d+)\.(.+)$/) {
				$_ = strnum($1) . ".$2";
			}
			$names{$_} = 1;
		}
	}
	$stars{$_} = [sort keys %names];
	print FO join("\n",@{$stars{$_}}),"\n";
	close FO;
	app_message scalar(@{$stars{$_}}), $OPTS{write} ? " items saved in $OUTPUT.\n" : " items [OK]\n";
}
if($F_lm) {
	app_message "Saving list to ListSource.pm...";
	save_list(\%stars_list);
	print STDERR "\t[OK]\n";
}
