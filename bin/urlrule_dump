#!/usr/bin/perl -w
###APPNAME:     urlrule_dump
###APPAUTHOR:   duel
###APPDATE:	Mon Mar 24 06:25:31 2008
###APPVER:	0.1
###APPDESC:     dump urlrule result	
###APPUSAGE:	URL [0-5]
###APPEXAMPLE:	urlrule_dump http://www.sina.com.cn 0
use strict;
use lib $ENV{XR_PERL_MODULE_DIR};
use Data::Dumper;
use utf8;
binmode STDOUT,':utf8';
binmode STDERR,':utf8';
binmode STDIN,':utf8';
my @OPTIONS = qw/
	help|h|? 
	manual|man
	info|i
/;
my %OPTS;
if(@ARGV)
{
    require Getopt::Long;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
}
else {
	$OPTS{'help'} = 1;
}
if($OPTS{'help'} or $OPTS{'manual'}) {
	require Pod::Usage;
	my $v = $OPTS{'help'} ? 1 : 2;
	Pod::Usage::pod2usage(-exitval=>$v,-verbose=>$v);
    exit $v;
}

use MyPlace::URLRule qw/parse_rule apply_rule set_callback/;
use Data::Dumper;

set_callback('apply_rule',sub {
	print Data::Dumper->Dump([\@_],['*apply_rule']);
});
my $url = shift;
my $level = shift;
if($level && $level !~ /^\d+$/) {
	unshift @ARGV,$level;
	$level = 0;
}
my $rule = parse_rule($url,$level);
print STDERR Data::Dumper->Dump([$rule],['*rule']) unless(@ARGV);
my ($status,$result) = apply_rule($rule);

sub error {
	my $r = shift;
	return unless($r);
	if($r && ref $r) {
		print STDERR "Error: $r->{error}\n";
	}
	else {
		print STDERR "Error: $r\n";
	}
}

if(!$status) {
	error($result);
	exit 1;
}
if(!$result) {
	error("Empty response");
	exit 2;
}
if(!ref $result) {
	print $result,"\n";
	exit 0;
}
if($result->{error}) {
	error($result->{error});
	exit 3;
}

my $INDENT="    ";
sub printval {
	my $r = shift;
	if($r) {
		if(ref $r && @{$r}) {
			print "\n$INDENT",join("\n$INDENT",@{$r}),"\n";
		}
		else {
			print "$r\n";
		}
	}
	else {
		print "undefined.\n";
	}
	return $r;
}

sub printkey {
	my $k = shift;
	my $l = shift(@_) || 0;
	if($l < 2) {
		print "$k:\t";
	}
	else {
		print "" . "$INDENT"x($l-1) . "$k:\t";
	}
}

if($OPTS{info}) {
	if(@ARGV) {
		foreach(@ARGV) {
			my $r = $result->{$_};
			printkey($_);
			printval($result->{$_});
		}
	}
	else {
		foreach(qw/url title base/) {
			printkey($_);
			printval($result->{$_}); 
		}
		printkey("pass_data:");
		if($result->{pass_data} && @{$result->{pass_data}}) {
			if($result->{pass_name} && @{$result->{pass_name}}) {
				my $idx = 0;
				print "\n";
				foreach(@{$result->{pass_data}}) {
					my $n = $result->{pass_name}->[$idx];
					printkey("$n",2);
					printval($_);
					$idx++;
				}
			}
			else {
				printval($result->{pass_data});
			}
		}
		else {
			printval("undefined");
		}
		printkey("data");
		if($result->{data} && @{$result->{data}}) {
			print "\n";
			foreach(@{$result->{data}}) {
				if(m/^(.+)\t(.+)$/) {
					printkey("$2",2);
					printval($1);
				}
				else {
					printval("\t$_");
				}
			}
		}
		else {
			printval("undefined");
		}
	}
}
else {

		if(@ARGV) {
			if(@ARGV == 1) {
				my $r = $result->{$ARGV[0]};
				if($r) {
					if(ref $r) {
						print join("\n",@{$r}),"\n" if(@{$r});
					}
					else {
						print $r,"\n";
					}
				}
			}
			else {
				foreach(@ARGV) {
					print Data::Dumper->Dump([$result->{$_}],['$result->{' . $_ . '}']);
				}
			}
		}
		else {
			if($result->{html}) {
				$result->{html} = "...";
			}
	        print Data::Dumper->Dump([$result],['result']);
		}
        exit 0;
}

